package cn.itcast.up.ml

import org.apache.spark.ml.clustering.{KMeans, KMeansModel}
import org.apache.spark.ml.feature.{MinMaxScaler, MinMaxScalerModel}
import org.apache.spark.sql.{DataFrame, SparkSession}

/**
  * Author itcast
  * Date 2019/11/2 11:30
  * Desc 演示使用K-Means算法对鸢尾花数据集进行聚类
  */
object IrisCluster {
  def main(args: Array[String]): Unit = {
    //1.创建SparkSession
    val spark: SparkSession = SparkSession.builder()
      .appName("IrisCluster")
      .master("local[*]")
      .getOrCreate()

    //2.读取数据
    val irisDF: DataFrame = spark.read.format("libsvm").load("file:///D:\\data\\spark\\ml\\iris_kmeans.txt")
    irisDF.show(false)//false表示不截断
    irisDF.printSchema()
    /*
+-----+-------------------------------+
|label|features                       |
+-----+-------------------------------+
|1.0  |(4,[0,1,2,3],[5.1,3.5,1.4,0.2])|
|1.0  |(4,[0,1,2,3],[4.9,3.0,1.4,0.2])|
|1.0  |(4,[0,1,2,3],[4.7,3.2,1.3,0.2])|
|1.0  |(4,[0,1,2,3],[4.6,3.1,1.5,0.2])|
|1.0  |(4,[0,1,2,3],[5.0,3.6,1.4,0.2])|
|1.0  |(4,[0,1,2,3],[5.4,3.9,1.7,0.4])|
|1.0  |(4,[0,1,2,3],[4.6,3.4,1.4,0.3])|
|1.0  |(4,[0,1,2,3],[5.0,3.4,1.5,0.2])|
|1.0  |(4,[0,1,2,3],[4.4,2.9,1.4,0.2])|
|1.0  |(4,[0,1,2,3],[4.9,3.1,1.5,0.1])|
|1.0  |(4,[0,1,2,3],[5.4,3.7,1.5,0.2])|
|1.0  |(4,[0,1,2,3],[4.8,3.4,1.6,0.2])|
|1.0  |(4,[0,1,2,3],[4.8,3.0,1.4,0.1])|
|1.0  |(4,[0,1,2,3],[4.3,3.0,1.1,0.1])|
|1.0  |(4,[0,1,2,3],[5.8,4.0,1.2,0.2])|
|1.0  |(4,[0,1,2,3],[5.7,4.4,1.5,0.4])|
|1.0  |(4,[0,1,2,3],[5.4,3.9,1.3,0.4])|
|1.0  |(4,[0,1,2,3],[5.1,3.5,1.4,0.3])|
|1.0  |(4,[0,1,2,3],[5.7,3.8,1.7,0.3])|
|1.0  |(4,[0,1,2,3],[5.1,3.8,1.5,0.3])|
+-----+-------------------------------+
only showing top 20 rows

root
 |-- label: double (nullable = true)
 |-- features: vector (nullable = true)
     */

    //3.对特征列数据进行归一化(对于标签列,源数据libsvm中已经做了编码)
    val model: MinMaxScalerModel = new MinMaxScaler()
      .setInputCol("features")
      .setOutputCol("scalerFeatures")
      .fit(irisDF)
    val scalerDF: DataFrame = model.transform(irisDF)
    scalerDF.show(false)
/*
+-----+-------------------------------+---------------------------------------------------------------------------------+
|label|features                       |scalerFeatures                                                                   |
+-----+-------------------------------+---------------------------------------------------------------------------------+
|1.0  |(4,[0,1,2,3],[5.1,3.5,1.4,0.2])|[0.22222222222222213,0.6249999999999999,0.06779661016949151,0.04166666666666667] |
|1.0  |(4,[0,1,2,3],[4.9,3.0,1.4,0.2])|[0.1666666666666668,0.41666666666666663,0.06779661016949151,0.04166666666666667] |
|1.0  |(4,[0,1,2,3],[4.7,3.2,1.3,0.2])|[0.11111111111111119,0.5,0.05084745762711865,0.04166666666666667]                |
|1.0  |(4,[0,1,2,3],[4.6,3.1,1.5,0.2])|[0.08333333333333327,0.4583333333333333,0.0847457627118644,0.04166666666666667]  |
|1.0  |(4,[0,1,2,3],[5.0,3.6,1.4,0.2])|[0.19444444444444448,0.6666666666666666,0.06779661016949151,0.04166666666666667] |
|1.0  |(4,[0,1,2,3],[5.4,3.9,1.7,0.4])|[0.30555555555555564,0.7916666666666665,0.11864406779661016,0.12500000000000003] |
|1.0  |(4,[0,1,2,3],[4.6,3.4,1.4,0.3])|[0.08333333333333327,0.5833333333333333,0.06779661016949151,0.08333333333333333] |
|1.0  |(4,[0,1,2,3],[5.0,3.4,1.5,0.2])|[0.19444444444444448,0.5833333333333333,0.0847457627118644,0.04166666666666667]  |
|1.0  |(4,[0,1,2,3],[4.4,2.9,1.4,0.2])|[0.027777777777777922,0.3749999999999999,0.06779661016949151,0.04166666666666667]|
|1.0  |(4,[0,1,2,3],[4.9,3.1,1.5,0.1])|[0.1666666666666668,0.4583333333333333,0.0847457627118644,0.0]                   |
|1.0  |(4,[0,1,2,3],[5.4,3.7,1.5,0.2])|[0.30555555555555564,0.7083333333333333,0.0847457627118644,0.04166666666666667]  |
|1.0  |(4,[0,1,2,3],[4.8,3.4,1.6,0.2])|[0.13888888888888887,0.5833333333333333,0.1016949152542373,0.04166666666666667]  |
|1.0  |(4,[0,1,2,3],[4.8,3.0,1.4,0.1])|[0.13888888888888887,0.41666666666666663,0.06779661016949151,0.0]                |
|1.0  |(4,[0,1,2,3],[4.3,3.0,1.1,0.1])|[0.0,0.41666666666666663,0.016949152542372895,0.0]                               |
|1.0  |(4,[0,1,2,3],[5.8,4.0,1.2,0.2])|[0.41666666666666663,0.8333333333333333,0.033898305084745756,0.04166666666666667]|
|1.0  |(4,[0,1,2,3],[5.7,4.4,1.5,0.4])|[0.38888888888888895,1.0,0.0847457627118644,0.12500000000000003]                 |
|1.0  |(4,[0,1,2,3],[5.4,3.9,1.3,0.4])|[0.30555555555555564,0.7916666666666665,0.05084745762711865,0.12500000000000003] |
|1.0  |(4,[0,1,2,3],[5.1,3.5,1.4,0.3])|[0.22222222222222213,0.6249999999999999,0.06779661016949151,0.08333333333333333] |
|1.0  |(4,[0,1,2,3],[5.7,3.8,1.7,0.3])|[0.38888888888888895,0.7499999999999998,0.11864406779661016,0.08333333333333333] |
|1.0  |(4,[0,1,2,3],[5.1,3.8,1.5,0.3])|[0.22222222222222213,0.7499999999999998,0.0847457627118644,0.08333333333333333]  |
+-----+-------------------------------+---------------------------------------------------------------------------------+
only showing top 20 rows
 */

    //4.使用K-Means聚类
    val kmeans: KMeans = new KMeans()
      .setK(3) //设置k值(聚为几类)
      .setMaxIter(10) //最大迭代次数
      .setSeed(10)//设置随机种子,保证测试时多次执行结果一致
    val kmodel: KMeansModel = kmeans.setFeaturesCol("scalerFeatures") //特征列
      .setPredictionCol("predict") //预测列
      .fit(scalerDF)
    val result: DataFrame = kmodel.transform(scalerDF)

    //5.查看结果
    result.show(false)
    /*
 +-----+-------------------------------+---------------------------------------------------------------------------------+-------+
|label|features                       |scalerFeatures                                                                   |predict|
+-----+-------------------------------+---------------------------------------------------------------------------------+-------+
|1.0  |(4,[0,1,2,3],[5.1,3.5,1.4,0.2])|[0.22222222222222213,0.6249999999999999,0.06779661016949151,0.04166666666666667] |0      |
|1.0  |(4,[0,1,2,3],[4.9,3.0,1.4,0.2])|[0.1666666666666668,0.41666666666666663,0.06779661016949151,0.04166666666666667] |0      |
|1.0  |(4,[0,1,2,3],[4.7,3.2,1.3,0.2])|[0.11111111111111119,0.5,0.05084745762711865,0.04166666666666667]                |0      |
|1.0  |(4,[0,1,2,3],[4.6,3.1,1.5,0.2])|[0.08333333333333327,0.4583333333333333,0.0847457627118644,0.04166666666666667]  |0      |
|1.0  |(4,[0,1,2,3],[5.0,3.6,1.4,0.2])|[0.19444444444444448,0.6666666666666666,0.06779661016949151,0.04166666666666667] |0      |
|1.0  |(4,[0,1,2,3],[5.4,3.9,1.7,0.4])|[0.30555555555555564,0.7916666666666665,0.11864406779661016,0.12500000000000003] |0      |
|1.0  |(4,[0,1,2,3],[4.6,3.4,1.4,0.3])|[0.08333333333333327,0.5833333333333333,0.06779661016949151,0.08333333333333333] |0      |
|1.0  |(4,[0,1,2,3],[5.0,3.4,1.5,0.2])|[0.19444444444444448,0.5833333333333333,0.0847457627118644,0.04166666666666667]  |0      |
|1.0  |(4,[0,1,2,3],[4.4,2.9,1.4,0.2])|[0.027777777777777922,0.3749999999999999,0.06779661016949151,0.04166666666666667]|0      |
|1.0  |(4,[0,1,2,3],[4.9,3.1,1.5,0.1])|[0.1666666666666668,0.4583333333333333,0.0847457627118644,0.0]                   |0      |
|1.0  |(4,[0,1,2,3],[5.4,3.7,1.5,0.2])|[0.30555555555555564,0.7083333333333333,0.0847457627118644,0.04166666666666667]  |0      |
|1.0  |(4,[0,1,2,3],[4.8,3.4,1.6,0.2])|[0.13888888888888887,0.5833333333333333,0.1016949152542373,0.04166666666666667]  |0      |
|1.0  |(4,[0,1,2,3],[4.8,3.0,1.4,0.1])|[0.13888888888888887,0.41666666666666663,0.06779661016949151,0.0]                |0      |
|1.0  |(4,[0,1,2,3],[4.3,3.0,1.1,0.1])|[0.0,0.41666666666666663,0.016949152542372895,0.0]                               |0      |
|1.0  |(4,[0,1,2,3],[5.8,4.0,1.2,0.2])|[0.41666666666666663,0.8333333333333333,0.033898305084745756,0.04166666666666667]|0      |
|1.0  |(4,[0,1,2,3],[5.7,4.4,1.5,0.4])|[0.38888888888888895,1.0,0.0847457627118644,0.12500000000000003]                 |0      |
|1.0  |(4,[0,1,2,3],[5.4,3.9,1.3,0.4])|[0.30555555555555564,0.7916666666666665,0.05084745762711865,0.12500000000000003] |0      |
|1.0  |(4,[0,1,2,3],[5.1,3.5,1.4,0.3])|[0.22222222222222213,0.6249999999999999,0.06779661016949151,0.08333333333333333] |0      |
|1.0  |(4,[0,1,2,3],[5.7,3.8,1.7,0.3])|[0.38888888888888895,0.7499999999999998,0.11864406779661016,0.08333333333333333] |0      |
|1.0  |(4,[0,1,2,3],[5.1,3.8,1.5,0.3])|[0.22222222222222213,0.7499999999999998,0.0847457627118644,0.08333333333333333]  |0      |
+-----+-------------------------------+---------------------------------------------------------------------------------+-------+
only showing top 20 rows
     */
    result.groupBy("label","predict").count().show(false)
    /*
+-----+-------+-----+
|label|predict|count|
+-----+-------+-----+
|2.0  |1      |47   |
|1.0  |0      |50   |
|2.0  |2      |3    |
|3.0  |1      |14   |
|3.0  |2      |36   |
+-----+-------+-----+
     */

  }
}
